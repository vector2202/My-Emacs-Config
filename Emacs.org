#+TITLE: My Emacs configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el
* Packages Setup
#+begin_src emacs-lisp
  ;;Initialize packages sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))
  (package-initialize)
  ;;(package-refresh-contents);; Only evaluate once every time
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src
* UI Configuration
Basic UI settings that remove unneeded elements to make it look more clean.
#+begin_src emacs-lisp
  (setq inhibit-startup-message t);; No message
  
  (set-fringe-mode 10);; Dont take up all
  (scroll-bar-mode -1);; Scroll bar disabled
  (show-paren-mode 1);; Show parenthesis mode
  (tool-bar-mode -1);; Disable tool bar
  (menu-bar-mode -1);; Disable menu bar
  '(cursor-type 'bar)
  (setq visible-bell t);; Visual alert
  
  (global-display-line-numbers-mode t)
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook
                  treemacs-mode-hook))
    :hook mode (lambda () (display-line-numbers-mode 0)))
  
  (set-frame-parameter (selected-frame) 'alpha '(90 . 90))
  (add-to-list 'default-frame-alist '(alpha . (90 . 90)))
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  
  (use-package wgrep);;Regexp
#+end_src
** Font
Actually using JetBrains mono as font
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "JetBrains Mono")
  
  (custom-theme-set-faces
   'user
   '(variable-pitch ((t (:family "ETBembo" :height 180 :weight thin))))
   '(fixed-pitch ((t ( :family "Fira Code Retina" :height 140)))))
#+end_src
**  Doom
Doom themes is a great set of themes, I choose acario dark.
#+begin_src emacs-lisp
(use-package doom-themes
  :init (load-theme 'doom-acario-dark t))
#+end_src
I use doom modeline for my mode line configuration.
#+begin_src emacs-lisp
  (use-package all-the-icons)
  
  (use-package minions
    :hook (doom-modeline-mode . minions-mode))
  
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom
    (doom-modeline-icon (display-graphic-p))
    (doom-modeline-major-mode-icon t)
    (doom-modeline-major-mode-color-icon t)
    (doom-modeline-buffer-state-icon t)
    (doom-modeline-buffer-modification-icon t)
    (doom-modeline-buffer-encoding t)
    (doom-modeline-enable-word-count nil)
    (doom-modeline-workspace-name t)
    (doom-modeline-persp-name t)
    (doom-modeline-display-default-persp-name nil)
    (doom-modeline-persp-icon t)
    (doom-modeline-irc-stylize 'identity)
    (doom-modeline-env-version t)
    (doom-modeline-env-load-string "...")
    (doom-modeline-height 15)
    (doom-modeline-bar-width 6)
    (doom-modeline-lsp t)
    (doom-modeline-github nil);;Requiere ghub
    (doom-modeline-irc t)
    (doom-modeline-minor-modes t)
    (doom-modeline-buffer-file-name-style 'truncate-except-project))
#+end_src
** Ivy and counsel
Ivy for emacs completion, a selection menu that appears and is very useful. Counsel is a customize set of commands to replace commands with counsel ones, useful for completions commands.

Ivy rich provides extra columns to counsel commands.
#+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :bind (
           ("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))
  
  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1))
  
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           ("C-M-j" . 'counsel-switch-buffer)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :config
    (counsel-mode 1))
#+end_src
** Prescient
We use prescient for improving ivy and counsel completions
#+begin_src emacs-lisp
  (use-package ivy-prescient
    :after counsel
    :config
    (ivy-prescient-mode +1)
    (setq ivy-prescient-retain-classic-highlighting t)
    (setq prescient-sort-length-enable nil)
    ;;(setq prescient-filter-method '(literal regexp anchored))
    (prescient-persist-mode 1)
    (setq ivy-prescient-sort-commands
          '(:not swiper
                 counsel-find-file
                 swiper-isearch
                 ivy-switch-buffer
                 lsp-ivy-workspace-symbol
                 dap-switch-stack-frame
                 dap-switch-session
                 dap-switch-thread
                 counsel-grep
                 find-file
                 counsel-git-grep
                 counsel-rg
                 counsel-ag
                 counsel-ack
                 counsel-fzf
                 counsel-pt
                 counsel-imenu
                 counsel-yank-pop
                 counsel-recentf
                 counsel-buffer-or-recentf
                 proced-filter-interactive
                 proced-sort-interactive
                 perspective-exwm-switch-perspective
                 lsp-execute-code-action
                 dired-recent-open))
    (ivy--alist-set 'ivy-sort-functions-alist #'read-file-name-internal #'ivy-sort-file-function-default))
  ;;Counsel 
  ;; (use-package company-prescient
  ;;   :after company
  ;;   :config
  ;;   (company-prescient-mode 1))
#+end_src
** Which key
Which key is a helpful UI panel that appears when you press a key binding in emacs, showing you all the possible key bindings completions.
#+begin_src emacs-lisp
  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))
#+end_src
** Helpful
Helpful add information to emacs describe commands.
#+begin_src emacs-lisp
  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . helpful-function)
    ([remap describe-symbol] . helpful-symbol)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-command] . helpful-command)
    ([remap describe-key] . helpful-key))
#+end_src
** Text scale
Hydra will help us to with a key binding, quickly adjust the scale of the text in the screen.
#+begin_src emacs-lisp
  (use-package hydra
    :defer t)
  
  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))
#+end_src
** Window management
# To open new windows in a vertical split.
# #+begin_src emacs-lisp
#   (setq split-height-threshold nil)
#   (setq split-width-threshold 0)
# #+end_src
Winum-mode for changing windows a way faster
#+begin_src emacs-lisp
  (use-package winum
    :config
    (winum-mode))
#+end_src
Edwina for a better window management
#+begin_src emacs-lisp
  (use-package edwina
    :ensure t
    :config
    (setq display-buffer-base-action '(display-buffer-below-selected))
    ;; (edwina-setup-dwm-keys)
    (edwina-mode 1))
#+end_src
** Backup Files
#+begin_src emacs-lisp
  (setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))
#+end_src
** Display buffer
We use display buffer for a better experience
#+begin_src emacs-lisp
  (setq display-buffer-base-action
        '(display-buffer-reuse-mode-window
          display-buffer-reuse-window
          display-buffer-same-window))
;;Dont rezise windows
  (setq even-window-sizes nil)
#+end_src
* Project management
** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/ComputerScience")
      (setq projectile-project-search-path '("~/ComputerScience")))
    (setq projectile-switch-project-action #'projectile-dired)
    )
  
  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))
#+end_src
** Magit
#+begin_src emacs-lisp
    ;; (use-package magit
    ;;   ;;:bind ("C-M-;" . magit-status)
    ;;   :commands (magit-status magit-get-current-branch)
    ;;   :custom
    ;;   (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
    ;; (use-package forge
  ;;:after magit)
#+end_src
* Org Mode
** My setups
Configures headings, list  so they see in a better document way.
#+begin_src emacs-lisp
  (defun vt/org-mode-setup ()
        (org-indent-mode)
        (variable-pitch-mode 1);;No using right now different fonts
        (auto-fill-mode 0)
        (display-line-numbers-mode 0)
        (visual-line-mode 1))
  
      (defun vt/org-font-setup ()
        ;; Replace list hyphen with dot
        (font-lock-add-keywords 'org-mode
                                '(("^ *\\([-]\\) "
                                   (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
  
        (set-face-attribute 'org-document-title nil :family "ETBembo" :weight 'bold :height 2.0)
        ;; Set faces for heading levels
        (dolist (face '((org-level-1 . 1.75)
                        (org-level-2 . 1.5)
                        (org-level-3 . 1.25)
                        (org-level-4 . 1.1)
                        (org-level-5 . 1.1)
                        (org-level-6 . 1.1)
                        (org-level-7 . 1.1)
                        (org-level-8 . 1.1)))
          (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))
  
        ;; Ensure that anything that should be fixed-pitch in Org files appears that way
        (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
        (set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
        (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
        (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
        ;;(set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
        (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
        (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
        (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
        (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
  
        (set-face-attribute 'org-column nil :background nil)
        (set-face-attribute 'org-column-title nil :background nil)
  
        '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
        '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
        '(org-link ((t (:foreground "royal blue" :underline t))))
        '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
  
        '(org-property-value ((t (:inherit fixed-pitch))) t)
        '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
        '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
        '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
        '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))
  
#+end_src
** Org Mode Config
#+begin_src emacs-lisp
  (use-package org
    :hook (org-mode . vt/org-mode-setup)
    :config
    (setq org-ellipsis " ▾"
          org-hide-emphasis-markers t)
  
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
    (setq org-agenda-files
          '("~/Documentos/Personal/OrgFiles/Tasks.org"
            ;;"~/Projects/Code/emacs-from-scratch/OrgFiles/Habits.org"
            ))
  
    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)
  
    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))
  
    (setq org-refile-targets
          '(("Archive.org" :maxlevel . 1)
            ("Tasks.org" :maxlevel . 1)))
  
    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)
  
    (setq org-tag-alist
          '((:startgroup)
            ;; Put mutually exclusive tags here
            (:endgroup)
            ("@errand" . ?E)
            ("@home" . ?H)
            ("@work" . ?W)
            ("agenda" . ?a)
            ("planning" . ?p)
            ("publish" . ?P)
            ("batch" . ?b)
            ("note" . ?n)
            ("idea" . ?i)))
  
    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
          '(("d" "Dashboard"
             ((agenda "" ((org-deadline-warning-days 7)))
              (todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))
              (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))
  
            ("n" "Next Tasks"
             ((todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))))
  
            ("W" "Work Tasks" tags-todo "+work-email")
  
            ;; Low-effort next actions
            ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
             ((org-agenda-overriding-header "Low Effort Tasks")
              (org-agenda-max-todos 20)
              (org-agenda-files org-agenda-files)))
  
            ("w" "Workflow Status"
             ((todo "WAIT"
                    ((org-agenda-overriding-header "Waiting on External")
                     (org-agenda-files org-agenda-files)))
              (todo "REVIEW"
                    ((org-agenda-overriding-header "In Review")
                     (org-agenda-files org-agenda-files)))
              (todo "PLAN"
                    ((org-agenda-overriding-header "In Planning")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "BACKLOG"
                    ((org-agenda-overriding-header "Project Backlog")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "READY"
                    ((org-agenda-overriding-header "Ready for Work")
                     (org-agenda-files org-agenda-files)))
              (todo "ACTIVE"
                    ((org-agenda-overriding-header "Active Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "COMPLETED"
                    ((org-agenda-overriding-header "Completed Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "CANC"
                    ((org-agenda-overriding-header "Cancelled Projects")
                     (org-agenda-files org-agenda-files)))))))
  
    (setq org-capture-templates
          `(("t" "Tasks / Projects")
            ("tt" "Task" entry (file+olp "~/Documentos/Personal/OrgFiles/Tasks.org" "Inbox")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)
  
            ("j" "Journal Entries")
            ("jj" "Journal" entry
             (file+olp+datetree "~/Documentos/Personal/OrgFiles/Journal.org")
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
  
             :clock-in :clock-resume
             :empty-lines 1)
            ("jm" "Meeting" entry
             (file+olp+datetree "~/Documentos/Personal/OrgFiles/Journal.org")
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)
  
            ("w" "Workflows")
            ("we" "Checking Email" entry (file+olp+datetree "~/Documentos/Personal/OrgFiles/Journal.org")
             "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)))
    (define-key global-map (kbd "C-c j")
      (lambda () (interactive) (org-capture nil "jj")))
  
    (vt/org-font-setup))
#+end_src
** Org bullets
Bullets for headers.
#+begin_src emacs-lisp
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src
** Org visual fill mode
Center org mode buffers for a better experience as a document.
#+begin_src emacs-lisp
  (defun vt/org-mode-visual-fill ()
    (setq visual-fill-column-width 150
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))
  
  (use-package visual-fill-column
    :hook (org-mode . vt/org-mode-visual-fill))
#+end_src
** Org babel
With this we can export code in org mode.
#+begin_src emacs-lisp
  ;;Basically this is for my emacs config with org
  (defun vt/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/Documentos/OrgFiles/Emacs/My-Emacs-Config/Emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))
  
  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'vt/org-babel-tangle-config)))
  
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)
     (shell . t)
     (C . t)))
  
  (require 'org-tempo)
  
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("cp" . "src C"))
#+end_src
** Presentations
#+begin_src emacs-lisp
  (unless (package-installed-p 'org-present)
    (package-install 'org-present))
  
  (defun my/org-present-prepare-slide (buffer-name heading)
    (org-overview)  ;; Show only top-level headlines
    (org-show-entry);; Unfold the current entry
    (org-show-children));;Dont expand subheadings
  
  (defun my/org-present-start ()
    (setq-local face-remapping-alist '((default (:height 1.5) variable-pitch)
                                       (header-line (:height 4.0) variable-pitch)
                                       (org-document-title (:height 1.75) org-document-title)
                                       (org-code (:height 1.55) org-code)
                                       (org-verbatim (:height 1.55) org-verbatim)
                                       (org-block (:height 1.25) org-block)
                                       (org-block-begin-line (:height 0.7) org-block)))
  
    ;; Set a blank header line string to create blank space at the top
    (setq header-line-format " ")
    (org-display-inline-images));; Display inline images automatically

  
  (defun my/org-present-end ()
    ;; Reset font customizations
    (setq-local face-remapping-alist '((default variable-pitch default)))
    ;; Clear the header line string so that it isn't displayed
    (setq header-line-format nil)
    (org-remove-inline-images)) ;; Stop displaying inline images
    
  ;; Register hooks with org-present
  (add-hook 'org-present-mode-hook 'my/org-present-start)
  (add-hook 'org-present-mode-quit-hook 'my/org-present-end)
  (add-hook 'org-present-after-navigate-functions 'my/org-present-prepare-slide)
#+end_src
* Language Server Protocol
I use lsp mode to enable the IDE functionaluty for different programming languages via "Language servers".
#+begin_src emacs-lisp
  (defun vt/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))
  
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . vt/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (lsp-enable-which-key-integration t))
  
  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))
  
  (use-package lsp-treemacs
    :after lsp)
  
  (use-package lsp-ivy
    :after lsp)
#+end_src
** C/C++
#+begin_src emacs-lisp
  (add-hook 'c-mode-hook 'lsp)
  (add-hook 'c++-mode-hook 'lsp)
  
  (setq gc-cons-threshnold (* 100 1024 1024)
        read-process-output-max (* 1024 1024)
        treemacs-space-between-root-nodes nil
        company-idle-delay 0.0
        company-minimum-prefix-length 1
        lsp-idle-delay 0.1)  ;; clangd is fast
  
  (with-eval-after-load 'lsp-mode
    (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration)
    (require 'dap-cpptools)
    (yas-global-mode))
  (setq c-default-style "linux"
        c-basic-offset 4)
#+end_src
** Haskell
#+begin_src emacs-lisp
  (require 'lsp)
  (require 'lsp-haskell)
  ;; Hooks so haskell trigger LSP Mode
  (add-hook 'haskell-mode-hook #'lsp)
  (add-hook 'haskell-literate-mode-hook #'lsp)
#+end_src
** Java
#+begin_src emacs-lisp
  (require 'lsp-java)
  (add-hook 'java-mode-hook #'lsp)
  (add-hook 'java-mode-hook #'smartparens-mode)

  (use-package java-snippets
    :ensure t)
#+end_src
** Latex
#+begin_src emacs-lisp
  (add-to-list 'load-path "/path/to/lsp-latex")
  (require 'lsp-latex)
  ;; "texlab" must be located at a directory contained in `exec-path'.
  ;; If you want to put "texlab" somewhere else,
  ;; you can specify the path to "texlab" as follows:
  ;; (setq lsp-latex-texlab-executable "/path/to/texlab")

  (with-eval-after-load "tex-mode"
    (add-hook 'tex-mode-hook 'lsp)
    (add-hook 'latex-mode-hook 'lsp))
#+end_src
** VHDL
#+begin_src emacs-lisp
(flycheck-define-checker vhdl-tool
  "A VHDL syntax checker, type checker and linter using VHDL-Tool.

See URL `http://vhdltool.com'."
  :command ("vhdl-tool" "client" "lint" "--compact" "--stdin" "-f" source
            )
  :standard-input t
  :error-patterns
  ((warning line-start (file-name) ":" line ":" column ":w:" (message) line-end)
   (error line-start (file-name) ":" line ":" column ":e:" (message) line-end))
  :modes (vhdl-mode))
  
(add-to-list 'flycheck-checkers 'vhdl-tool)
#+end_src
** Python
#+begin_src emacs-lisp
  (use-package lsp-pyright
    :ensure t
    :hook (python-mode . (lambda ()
                           (require 'lsp-pyright)
                           (lsp))))
  (add-hook 'python-mode-hook #'smartparens-mode)
#+end_src
** Go
We will use gopls for LSP server
#+begin_src emacs-lisp
  (use-package go-mode
    :mode "\\.go\\'"
    :config
    (add-hook 'go-mode-hook #'smartparens-mode)
    (add-hook 'go-mode-hook #'hs-minor-mode)
    (add-hook 'go-mode-hook #'lsp-deferred))

  (lsp-register-custom-settings
 '(("gopls.completeUnimported" t t)
   ("gopls.staticcheck" t t)))
#+end_src
** Company Mode
Company provide us a better completion interface and we use company box for a better icons and presentation.
#+begin_src emacs-lisp
  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
           ("<tab>" . company-complete-selection))
          (:map lsp-mode-map
           ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0)
    (company-backends '(company-capf)))
  ;;(add-hook 'after-init-hook 'global-company-mode)
  
  (use-package company-box
    :hook (company-mode . company-box-mode))
  '(company-box-icons-alist 'company-box-icons-images)
  (require 'company-irony-c-headers)
     ;; Load with `irony-mode` as a grouped backend
     (eval-after-load 'company
       '(add-to-list
         'company-backends '(company-irony-c-headers company-irony)))
#+end_src
* DAP mode
#+begin_src emacs-lisp
  (use-package dap-mode
    :commands (dap-debug)
    :init
    (setq lsp-enable-dap-auto-configure nil)
    :config

    ;;(setq dap-ui-variable-length 100)
    ;;(setq dap-auto-show-output nil)
    (require 'dap-node)
    (dap-node-setup)

    (require 'dap-chrome)
    (dap-chrome-setup)

    (require 'dap-python)
    (require 'dap-php)
    (require 'dap-java)
    (require 'dap-lldb)

    (dap-mode 1)
    (dap-ui-mode 1)
    (dap-tooltip-mode 1)
    (tooltip-mode 1))
#+end_src
* Terminal in emacs
#+begin_src emacs-lisp
  (use-package vterm
    :commands vterm
    :config
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
    ;;(setq vterm-shell "zsh")                       ;; Set this to customize the shell to launch
    (setq vterm-max-scrollback 10000))
#+end_src
* Productivity
** Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :defer t
    :hook (lsp-mode . flycheck-mode))
#+end_src
** Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet-snippets
    :ensure t)
  (use-package yasnippet
       :hook (prog-mode . yas-minor-mode)
       ;;:hook
       :config
       (yas-reload-all)
       (setq yas-triggers-in-field t)
       (yas-global-mode 1))
#+end_src
** Smart parens
#+begin_src emacs-lisp
  (use-package smartparens
    :hook (prog-mode . smartparens-mode))
#+end_src
** Rainbow delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** Electric for quotes and identation
#+begin_src emacs-lisp
  (electric-indent-mode t)
  '(electric-quote-replace-double t)
#+end_src
* Latex
** Folding/unfolding
#+begin_src emacs-lisp
  (use-package outshine
    :config
    (setq LaTeX-section-list '(
                               ("part" 0)
                               ("chapter" 1)
                               ("section" 2)
                               ("subsection" 3)
                               ("subsubsection" 4)
                               ("paragraph" 5)
                               ("subparagraph" 6)
                               ("begin" 7)
                               )
          )
    (add-hook 'LaTeX-mode-hook #'(lambda ()
                                   (outshine-mode 1)
                                   (setq outline-level #'LaTeX-outline-level)
                                   (setq outline-regexp (LaTeX-outline-regexp t))
                                   (setq outline-heading-alist
                                         (mapcar (lambda (x)
                                                   (cons (concat "\\" (nth 0 x)) (nth 1 x)))
                                                 LaTeX-section-list))))
  
    )
  (use-package general
  :config
  (general-evil-setup t))
  
  (general-define-key
   :states '(normal visual)
   :keymaps 'LaTeX-mode-map
   "TAB"  '(outshine-cycle :which-key "outshine-cycle")
   )
#+end_src
** Auctex
#+begin_src emacs-lisp
  (use-package tex
    :ensure auctex
    :defer t
    :hook
    (LaTeX-mode . rainbow-delimiters-mode)
    (LaTeX-mode . smartparens-mode)
    (LaTeX-mode . prettify-symbols-mode)
    (LaTeX-mode . flyspell-mode)
    (LaTeX-mode . flycheck-mode)
    (LaTeX-mode . LaTeX-math-mode)
    (LaTex-mode . my/latex-section-snippets)
    :config
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq-default TeX-master nil)
    (TeX-PDF-mode)
    (setq-default TeX-command-extra-options "-shell-escape")
    (setq-default LaTeX-math-menu-unicode t)
    (setq-default my/latex-section-snippets t)
    (setq-default my/latex-math-snippets t)
    ;; very important so that PDFView refesh itself after comilation
    (add-hook 'TeX-after-compilation-finished-functions
              #'TeX-revert-document-buffer)
    (add-hook 'tex-hook #'my/section-latex-snippets)
    (require 'smartparens-latex)
  
    (general-nmap
     :keymaps '(LaTeX-mode-map latex-mode-map)
     "RET" 'TeX-command-run-all
     "C-c t" 'orgtbl-mode)
  
    ;;<<init-math-latex-snippets>>
    ;;<<init-section-latex-snippets>>
    )
#+end_src
** Import *.sty
#+begin_src emacs-lisp
  (defun my/list-sty ()
    (reverse
     (sort
      (seq-filter
       (lambda (file) (if (string-match ".*\.sty$" file) 1 nil))
       (directory-files
        (seq-some
         (lambda (dir)
           (if (and
                (f-directory-p dir)
                (seq-some
                 (lambda (file) (string-match ".*\.sty$" file))
                 (directory-files dir))
                ) dir nil))
         (list "./styles" "../styles/" "." "..")) :full))
      (lambda (f1 f2)
        (let ((f1b (file-name-base f1))
              (f1b (file-name-base f2)))
          (cond
           ((string-match-p ".*BibTex" f1) t)
           ((and (string-match-p ".*Locale" f1) (not (string-match-p ".*BibTex" f2))) t)
           ((string-match-p ".*Preamble" f2) t)
           (t (string-lessp f1 f2))))))))
  
  (defun my/import-sty ()
    (interactive)
    (insert
     (apply #'concat
            (cl-mapcar
             (lambda (file) (concat "\\usepackage{" (file-name-sans-extension (file-relative-name file default-directory)) "}\n"))
             (my/list-sty)))))
  
  (defun my/import-sty-org ()
    (interactive)
    (insert
     (apply #'concat
            (cl-mapcar
             (lambda (file) (concat "#+LATEX_HEADER: \\usepackage{" (file-name-sans-extension (file-relative-name file default-directory)) "}\n"))
             (my/list-sty)))))
#+end_src
** Section snippets
#+begin_src emacs-lisp
(setq my/latex-section-snippets
      '(("ch" . "\\chapter{$1}")
      ("sec" . "\\section{$1}")
      ("ssec" . "\\subsection{$1}")
      ("sssec" . "\\subsubsection{$1}")
      ("par" . "\\paragraph{$1}}")))

(setq my/latex-section-snippets
(mapcar
       (lambda (elem)
	 `(,(car elem)
	   ,(cdr elem)
	   ,(progn
	      (string-match "[a-z]+" (cdr elem))
	      (match-string 0 (cdr elem)))))
       my/latex-section-snippets))

(dolist (elem my/latex-section-snippets)
  (let* ((key (nth 0 elem))
	 (value (nth 1 elem))
	 (desc (nth 2 elem))
	 (star-index (string-match "\{\$1\}" value)))
    (add-to-list 'my/latex-section-snippets
		 `(,(concat key "*")
		   ,(concat
		     (substring value 0 star-index)
		     "*"
		     (substring value star-index))
		   ,(concat desc " with *")))
    (add-to-list 'my/latex-section-snippets
		 `(,(concat key "l")
		   ,(concat value "%\n\\label{sec:$2}")
		   ,(concat desc " with label")))))

(dolist (elem my/latex-section-snippets)
  (setf (nth 1 elem) (concat (nth 1 elem) "\n$0")))

(yas-define-snippets
 'latex-mode
 my/latex-section-snippets)

#+end_src
** Math snippets
#+begin_src emacs-lisp
  (setq my/latex-math-symbols
        '(("x" . "\\times")
          ("." . "\\cdot")
          ("v" . "\\forall")
          ("t" . "\\therefore")
          ("s" . "\\sum_{$1}^{$2}$0")
          ("p" . "\\prod_{$1}^{$2}$0")
          ("d" . "\\partial")
          ("e" . "\\exists")
          ("i" . "\\int_{$1}^{$2}$0")
          ("n" . "\\cap")
          ("u" . "\\cup")
          ("0" . "\\emptyset")
          ("^" . "\\widehat{$1}$0")
          ("_" . "\\overline{$1}$0")
          ("~" . "\\sim")
          ("|" . "\\mid")
          ("_|" . "\\perp")
          ("c" . "\\mathbb{$0}")
          ("su" . "\\subset")
          ("r" . "\\rightarrow")
          ("R" . "\\Rightarrow")
          ("in" . "\\in")))

  (setq my/latex-math-prefix ";")

  (yas-define-snippets
   'latex-mode
   (mapcar
    (lambda (elem)
      (let ((key (car elem))
            (value (cdr elem)))
        (list (concat my/latex-math-prefix key) value (concat "Math symbol " value))))
    my/latex-math-symbols))
#+end_src
* Document extensions
** PDF
#+begin_src emacs-lisp
  (pdf-tools-install)  ; Standard activation command
  (pdf-loader-install)
#+end_src

Fix text selection is not transparent:
#+begin_src emacs-lisp
  (defun my-fix-pdf-selection ()
  "Replace pdf with one where selection shows transparently."
  (interactive)
  (unless (equal (file-name-extension (buffer-file-name)) "pdf")
    (error "Buffer should visit a pdf file."))
  (unless (equal major-mode 'pdf-view-mode)
    (pdf-view-mode))
  ;; save file in QDF-mode
  (qpdf-run (list
             (concat "--infile="
                     (buffer-file-name))
             "--qdf --object-streams=disable"
             "--replace-input"))
  ;; do replacements
  (text-mode)
  (read-only-mode -1)
  (while (re-search-forward "3 Tr" nil t)
    (replace-match "7 Tr" nil nil))
  (save-buffer)
  (pdf-view-mode))
#+end_src
* File Management
#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first")))
  
  (use-package dired-single)
  
  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-open
    :config
    ;; Doesn't work as expected!
    ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
    (setq dired-open-extensions '(("png" . "feh")
                                  ("mkv" . "mpv"))))

  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode))
#+end_src

